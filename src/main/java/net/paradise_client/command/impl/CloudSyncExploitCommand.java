package net.paradise_client.command.impl;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;
import net.paradise_client.command.Command;
import net.paradise_client.packet.CloudSyncPacket;
import net.paradise_client.Msg;
import net.minecraft.client.MinecraftClient;
import net.minecraft.command.CommandSource;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import static com.mojang.brigadier.arguments.StringArgumentType.*;
import static net.minecraft.server.command.CommandManager.argument;
import static net.minecraft.server.command.CommandManager.literal;

public class CloudSyncExploitCommand extends Command {

    // âœ… FIXED: Constructor added to match the base class requirements
    public CloudSyncExploitCommand() {
        super("cloudsync", "Sends a cloud payload to a player", true); // Use the correct constructor
    }

    @Override
    public void build(LiteralArgumentBuilder<CommandSource> builder) {
        builder.executes(this::executeRoot)
            .then(argument("username", string())
                .suggests(this::suggestUsernames)
                .then(argument("command", greedyString())
                    .executes(this::executePayload)));
    }

    private CompletableFuture<Suggestions> suggestUsernames(CommandContext<CommandSource> context, SuggestionsBuilder builder) {
        String input = builder.getRemaining().toLowerCase();
        MinecraftClient client = MinecraftClient.getInstance();

        if (client.getNetworkHandler() != null) {
            client.getNetworkHandler().getPlayerList().stream()
                .map(entry -> entry.getProfile().getName())
                .filter(Objects::nonNull)
                .filter(name -> name.toLowerCase().startsWith(input))
                .forEach(builder::suggest);
        }

        return builder.buildFuture();
    }

    private int executeRoot(CommandContext<CommandSource> context) {
        Msg.sendFormattedMessage("&cUsage: ,cloudsync <username> <command>");
        return 0;
    }

    private int executePayload(CommandContext<CommandSource> context) {
        String username = getString(context, "username");
        String command = getString(context, "command");
        Msg.sendFormattedMessage("&a[CloudSync] Sending cloud payload to &f" + username + "&a...");
        CloudSyncPacket.send(username, command);
        return 1;
    }
}
